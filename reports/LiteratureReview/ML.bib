@inproceedings{Ahmed2018,
abstract = {Compile-time errors pose a major learning hurdle for students of introductory programming courses. Compiler error messages, while accurate, are targeted at seasoned programmers, and seem cryptic to beginners. In this work, we address this problem of pedagogically-inspired program repair and report TRACER (Targeted RepAir of Compilation ERrors), a system for performing repairs on compilation ...},
author = {Ahmed, Umair Z. and Kumar, Pawan and Karkare, Amey and Kar, Purushottam and Gulwani, Sumit},
booktitle = {2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ahmed et al. - 2018 - Compilation Error Repair For the Student Programs, From the Student Programs.pdf:pdf},
publisher = {IEEE},
title = {{Compilation Error Repair: For the Student Programs, From the Student Programs}},
url = {https://ieeexplore.ieee.org/document/8445185/},
year = {2018}
}
@article{Chen2022,
abstract = {A key challenge in generate-and-validate automated program repair is directing the search for fixes so that it can efficiently find those that are more likely to be correct. To this end, several techniques use machine learning to capture the features of programmer-written fixes. In existing approaches, fitting the model typically takes place before fix generation and is independent of ...},
author = {Chen, Liushan and Pei, Yu and Pan, Minxue and Zhang, Tian and Wang, Qixin and Furia, Carlo Alberto},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chen et al. - 2022 - Program Repair with Repeated Learning.pdf:pdf},
journal = {IEEE Transactions on Software Engineering},
publisher = {IEEE},
title = {{Program Repair with Repeated Learning}},
url = {https://ieeexplore.ieee.org/document/9749899/},
year = {2022}
}
@inproceedings{Gopinath2016,
abstract = {Debugging remains costly and tedious, especially for code that performs intricate operations that are conceptually complex to reason about. We present MLR, a novel approach for repairing faults in such operations, specifically in the context of complex data structures. Our focus is on faults in conditional statements. Our insight is that an integrated approach based on machine learning and s...},
author = {Gopinath, Divya and Wang, Kaiyuan and Hua, Jinru and Khurshid, Sarfraz},
booktitle = {2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Gopinath et al. - 2016 - Repairing Intricate Faults in Code Using Machine Learning and Path Exploration.pdf:pdf},
publisher = {IEEE},
title = {{Repairing Intricate Faults in Code Using Machine Learning and Path Exploration}},
url = {https://ieeexplore.ieee.org/document/7816493/},
year = {2016}
}
@inproceedings{Jiang2019,
abstract = {Inferring program transformations from concrete program changes has many potential uses, such as applying systematic program edits, refactoring, and automated program repair. Existing work for inferring program transformations usually rely on statistical information over a potentially large set of program-change examples. However, in many practical scenarios we do not have such a large set o...},
author = {Jiang, Jiajun and Ren, Luyao and Xiong, Yingfei and Zhang, Lingming},
booktitle = {2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Jiang et al. - 2019 - Inferring Program Transformations From Singular Examples via Big Code.pdf:pdf},
publisher = {IEEE},
title = {{Inferring Program Transformations From Singular Examples via Big Code}},
url = {https://ieeexplore.ieee.org/document/8952210/},
year = {2019}
}
@misc{Le2016,
address = {New York, NY, USA},
author = {Le, Xuan-Bach D.},
doi = {10.1145/2970276},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Le - 2016 - Towards efficient and effective automatic program repair.pdf:pdf},
isbn = {9781450338455},
keywords = {CCS Concepts •Software and its engineering → Softw,Deductive Reasoning,Genetic Programming,Keywords Automatic Program Repair,Mining Soft-ware Repository},
title = {{Towards Efficient and Effective Automatic Program Repair}},
url = {http://dx.doi.org/10.1145/2970276.2975934 https://ieeexplore.ieee.org/document/7582831/},
year = {2016}
}
@inproceedings{Liu2013,
abstract = {Many bugs, even those that are known and documented in bug reports, remain in mature software for a long time due to the lack of the development resources to fix them. We propose a general approach, R2Fix, to automatically generate bug-fixing patches from free-form bug reports. R2Fix combines past fix patterns, machine learning techniques, and semantic patch generation techniques to fix bugs...},
author = {Liu, Chen and Yang, Jinqiu and Tan, Lin and Hafiz, Munawar},
booktitle = {2013 IEEE Sixth International Conference on Software Testing, Verification and Validation},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Liu et al. - 2013 - R2Fix Automatically Generating Bug Fixes from Bug Reports.pdf:pdf},
publisher = {IEEE},
title = {{R2Fix: Automatically Generating Bug Fixes from Bug Reports}},
url = {https://ieeexplore.ieee.org/document/6569740/},
year = {2013}
}
@article{Lutellier2019,
abstract = {Automated generate-and-validate (G&V) program repair techniques typically
rely on hard-coded rules, only fix bugs following specific patterns, and are
hard to adapt to different programming languages. We propose ENCORE, a new G&V
technique, which uses ensemble learning on convolutional neural machine
translation (NMT) models to automatically fix bugs in multiple programming
languages. We take advantage of the randomness in hyper-parameter tuning to build
multiple models that fix different bugs and combine them using ensemble
learning. This new convolutional NMT approach outperforms the standard long
short-term memory (LSTM) approach used in previous work, as it better captures
both local and long-distance connections between tokens. Our evaluation on two popular benchmarks, Defects4J and QuixBugs, shows that
ENCORE fixed 42 bugs, including 16 that have not been fixed by existing
techniques. In addition, ENCORE is the first G&V repair technique to be applied
to four popular programming languages (Java, C++, Python, and JavaScript),
fixing a total of 67 bugs across five benchmarks.},
archivePrefix = {arXiv},
arxivId = {1906.08691},
author = {Lutellier, Thibaud and Pang, Lawrence and Pham, Viet Hung and Wei, Moshi and Tan, Lin},
doi = {10.48550/arxiv.1906.08691},
eprint = {1906.08691},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Lutellier et al. - 2019 - ENCORE Ensemble Learning using Convolution Neural Machine Translation for Automatic Program Repair.pdf:pdf},
month = {jun},
title = {{ENCORE: Ensemble Learning using Convolution Neural Machine Translation for Automatic Program Repair}},
url = {https://arxiv.org/abs/1906.08691v1},
year = {2019}
}
@article{Nielebock2020,
abstract = {Application Programming Interfaces (APIs) are a way to reuse existing functionalities of one application in another one. However, due to lacking knowledge on the correct usage of a particular API, developers sometimes commit misuses, causing unintended or faulty behavior. To detect and eventually repair such misuses automatically, inferring API usage patterns from real-world code is the state-of-the-art. A contradiction to an identified usage pattern denotes a misuse, while applying the pattern fixes the respective misuse. The success of this process heavily depends on the quality of the usage patterns and on the code from which these are inferred. Thus, a lack of code demonstrating the correct usage makes it impossible to detect and fix a misuse. In this paper, we discuss the potential of using machine-learning vector embeddings to improve automatic program repair and to extend it towards cross-API and cross-language repair. We illustrate our ideas using one particular technique for API-embedding (i.e., API2Vec) and describe the arising possibilities and challenges.},
author = {Nielebock, Sebastian and Heum{\"{u}}ller, Robert and Kr{\"{u}}ger, Jacob and Ortmeier, Frank},
doi = {10.1145/3387940.3392171},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nielebock et al. - 2020 - Using API-Embedding for API-Misuse Repair.pdf:pdf},
isbn = {9781450379632},
journal = {Proceedings - 2020 IEEE/ACM 42nd International Conference on Software Engineering Workshops, ICSEW 2020},
keywords = {API Embeddings,API Misuse,Program Repair},
month = {jun},
pages = {1--2},
publisher = {Association for Computing Machinery, Inc},
title = {{Using API-Embedding for API-Misuse Repair}},
url = {https://doi.org/10.1145/3387940.3392171},
year = {2020}
}
@article{Tian2021,
abstract = {How do we know a generated patch is correct? This is a key challenging question that automated program repair (APR) systems struggle to address given the incompleteness of available test suites. Ou...},
author = {Tian, Haoye and Li, Yinghua and Pian, Weiguo and Kabor{\'{e}}, Abdoul Kader and Liu, Kui and Habib, Andrew and Klein, Jacques and Bissyand{\'{e}}, Tegawend{\'{e}} F.},
doi = {10.1145/3511096},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tian et al. - 2021 - Predicting Patch Correctness Based on the Similarity of Failing Test Cases.pdf:pdf},
issn = {1049-331X},
journal = {ACM Transactions on Software Engineering and Methodology},
keywords = {Patch Correctness,Patch Semantics,Program Repair,Test Behavior},
month = {jul},
publisher = {
ACM
PUB27
New York, NY
},
title = {{Predicting Patch Correctness Based on the Similarity of Failing Test Cases}},
url = {https://dl.acm.org/doi/abs/10.1145/3511096},
year = {2021}
}
@article{Tian2020,
abstract = {A large body of the literature of automated program repair develops approaches where patches are generated to be validated against an oracle (e.g., a test suite). Because such an oracle can be imperfect, the generated patches, although validated by the oracle, may actually be incorrect. While the state of the art explore research directions that require dynamic information or that rely on manually-crafted heuristics, we study the benefit of learning code representations in order to learn deep features that may encode the properties of patch correctness. Our empirical work mainly investigates different representation learning approaches for code changes to derive embeddings that are amenable to similarity computations. We report on findings based on embeddings produced by pre-trained and re-trained neural networks. Experimental results demonstrate the potential of embeddings to empower learning algorithms in reasoning about patch correctness: a machine learning predictor with BERT transformer-based embeddings associated with logistic regression yielded an AUC value of about 0.8 in the prediction of patch correctness on a deduplicated dataset of 1000 labeled patches. Our investigations show that learned representations can lead to reasonable performance when comparing against the state-of-the-art, PATCH-SIM, which relies on dynamic information. These representations may further be complementary to features that were carefully (manually) engineered in the literature.},
archivePrefix = {arXiv},
arxivId = {2008.02944},
author = {Tian, Haoye and Liu, Kui and Kabore, Abdoul Kader and Koyuncu, Anil and Li, Li and Klein, Jacques and Bissyande, Tegawende F. and Kabor{\'{e}}, Abdoul Kader and Koyuncu, Anil and Li, Li and Klein, Jacques and Bissyand{\'{e}}, Tegawend{\'{e}} F.},
doi = {10.1145/3324884.3416532},
eprint = {2008.02944},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tian et al. - 2020 - Evaluating Representation Learning of Code Changes for Predicting Patch Correctness in Program Repair.pdf:pdf},
isbn = {9781450367684},
journal = {Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020},
keywords = {Distributed Representation Learning,Embeddings,Machine learning,Patch Correctness,Program Repair},
month = {sep},
pages = {981--992},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Evaluating Representation Learning of Code Changes for Predicting Patch Correctness in Program Repair}},
url = {https://ieeexplore.ieee.org/document/9286101/ https://doi.org/10.1145/3324884.3416532},
year = {2020}
}
@article{Valueian2022,
abstract = {Automatic program repair (APR) is an active research area, in which the problem is to discover a solution for a given faulty program that fixes the fault. As yet, a myriad of APR techniques has been proposed in the literature even though the research should go a long way toward establishing APR techniques that are industrially-viable. A current issue is to deal with multiple-fault (MF) programs. Although they are prevalent in real-world settings, automatic repair of MF programs has received less attention in the literature. In this paper, we propose SituRepair, a new APR technique which is developed to fix MF programs; that is, it is intended to discover a solution that fixes multiple faults at a time for a given faulty program. The significance of SituRepair for Critical Infrastructure Protection (CIP) is to provide extensive empirical evidence that APR is viable in CIP software systems. First, we compute 50 static features for each faulty program in a training benchmark where the type and situation of the fault(s) are known. We have considered 151 types of different faults, which have been manually elicited from the training benchmark. The fault types include various single-fault (SF) and MF cases. Then, we use the faulty programs' static data to build a machine-learning model. Next, for a new faulty program, the model receives as input the values of its static features and predicts the types and situations of the fault(s). Finally, we apply various modifications to the faulty program, according to the types and situations of the fault(s), so that every fault is fixed. SituRepair employs a program's test suite to evaluate the modified variants, as test suites are often readily-available. To investigate the effectiveness of SituRepair, we have conducted extensive experiments on 25,619 C programs within Code4Bench, including 16,274 SF and 9345 MF programs. In the experiments, SituRepair could successfully repair 17,195 programs of which 13,347 cases are SF and 3848 cases are MF programs. We conclude that SituRepair seems to have the potential to be used for multiple fault APR. In addition, SituRepair could repair each program in 9.24 min on average, which is of practical importance. The impact of this work on researchers is to incentivize them to apply further static code features and sophisticated machine-learning models. For practitioners, it can facilitate the debugging tasks yielding higher quality software systems for CIP settings.},
author = {Valueian, Meysam and Vahidi-Asl, Mojtaba and Khalilian, Alireza},
doi = {10.1016/J.IJCIP.2022.100527},
issn = {1874-5482},
journal = {International Journal of Critical Infrastructure Protection},
month = {jul},
pages = {100527},
publisher = {Elsevier},
title = {{SituRepair: Incorporating machine-learning fault class prediction to inform situational multiple fault automatic program repair}},
volume = {37},
year = {2022}
}
@article{Xu2020,
author = {Xu, Xuezheng},
doi = {10.26190/UNSWORKS/2196},
keywords = {Fault Localization,Machine Learning,Null Pointer Dereference,Program Analysis,Program Repair},
publisher = {UNSW Sydney},
title = {{Automated Program Repair using Program Analysis and Machine Learning Techniques}},
url = {http://hdl.handle.net/1959.4/70520},
year = {2020}
}
@article{Schramm2017,
abstract = {Automatic program repair offers the promise of significant reduction in debugging time, but still faces challenges in making the process efficient, accurate, and generalizable enough for practical application. Recent efforts such as Prophet demonstrate that machine learning can be used to develop heuristics about which patches are likely to be correct, reducing overfitting problems and improving speed of repair. SearchRepair takes a different approach to accuracy, using blocks of human-written code as patches to better constrain repairs and avoid overfitting. This project combines Prophet's learning techniques with SearchRepair's larger block size to create a method that is both fast and accurate, leading to higher-quality repairs. We propose a novel first-pass filter to substantially reduce the number of candidate patches in SearchRepair and demonstrate 85% reduction in runtime over standard SearchRepair on the IntroClass dataset. CCS CONCEPTS • Software and its engineering → Error handling and recovery ; Search-based software engineering; • Computing methodolo-gies → Machine learning;},
address = {New York, NY, USA},
author = {Schramm, Liam},
doi = {10.1145/3106237},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Schramm - 2017 - Improving Performance of Automatic Program Repair using Learned Heuristics.pdf:pdf},
isbn = {9781450351058},
journal = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
keywords = {Automatic program repair,Machine learning,Semantic search},
publisher = {ACM},
title = {{Improving Performance of Automatic Program Repair using Learned Heuristics}},
url = {https://doi.org/10.1145/3106237.3121281},
year = {2017}
}
@article{Ji2022,
abstract = {Recently, machine learning-based automated program synthesis and repair have extensively been investigated for various domain-specific and general-purpose programming languages. In this paper, we revisit the problem of synthesizing programs from input-output examples, and reformulate it as a problem of program repair.},
address = {New York, NY, USA},
author = {Ji, Suhwan and Choi, Sang-Min and Ko, Sang-Ki and Kim, Dohyung and Im, Hyeonseung},
doi = {10.1145/3477314},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ji et al. - 2022 - RepCoder An Automated Program Repair Framework for Probability-Based Program Synthesis.pdf:pdf},
isbn = {9781450387132},
journal = {Proceedings of the 37th ACM/SIGAPP Symposium on Applied Computing},
keywords = {Program Repair,Program Synthesis},
publisher = {ACM},
title = {{RepCoder: An Automated Program Repair Framework for Probability-Based Program Synthesis}},
url = {https://doi.org/10.1145/3477314.3507083},
year = {2022}
}
@article{Chen2021,
abstract = {This paper presents a novel end-to-end approach to program repair based on sequence-to-sequence learning. We devise, implement, and evaluate a technique, called SequenceR, for fixing bugs based on sequence-to-sequence learning on source code. This approach uses the copy mechanism to overcome the unlimited vocabulary problem that occurs with big code. Our system is data-driven; we train it on...},
author = {Chen, Zimin and Kommrusch, Steve and Tufano, Michele and Pouchet, Louis-No{\"{e}}l and Poshyvanyk, Denys and Monperrus, Martin},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chen et al. - 2021 - SequenceR Sequence-to-Sequence Learning for End-to-End Program Repair.pdf:pdf},
journal = {IEEE Transactions on Software Engineering},
number = {9},
publisher = {IEEE},
title = {{SequenceR: Sequence-to-Sequence Learning for End-to-End Program Repair}},
url = {https://ieeexplore.ieee.org/document/8827954/},
volume = {47},
year = {2021}
}
@inproceedings{Saha2018,
abstract = {Object-oriented (OO) languages, by design, make heavy use of method invocations (MI). Unsurprisingly, a large fraction of OO-program bug patches also involves method invocations. However, current program repair techniques incorporate MIs in very limited ways, ostensibly to avoid searching the huge repair space that method invocations afford. To address this challenge, in previous work, we pr...},
author = {Saha, Ripon and Yoshida, Hiroaki and Prasad, Mukul and Tokumoto, Susumu and Takayama, Kuniharu and Nanba, Isao},
booktitle = {2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion)},
file = {:C\:/Users/carol/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Saha et al. - 2018 - Elixir An Automated Repair Tool for Java Programs.pdf:pdf},
publisher = {IEEE},
title = {{Elixir: An Automated Repair Tool for Java Programs}},
url = {https://ieeexplore.ieee.org/document/8449449/},
year = {2018}
}
