--- ./original/org/apache/commons/math/optimization/direct/MultiDirectional.java	2022-12-19 08:18:12.000000000 +0000
+++ ./variant542/org/apache/commons/math/optimization/direct/MultiDirectional.java	2022-12-19 11:39:55.000000000 +0000
@@ -87,12 +87,14 @@
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
-            }
+            {
+				if (comparator.compare(contracted, best) < 0) {
+					return;
+				}
+				{
+					return;
+				}
+			}
 
         }
 
@@ -122,7 +124,13 @@
             final double[] xOriginal    = original[i].getPointRef();
             final double[] xTransformed = new double[n];
             for (int j = 0; j < n; ++j) {
-                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);
+                {
+					if (j >= 0 && j < xOriginal.length && j >= 0 && j < xSmallest.length
+							&& j >= 0 && j < xSmallest.length && j >= 0
+							&& j < xTransformed.length) {
+						xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);
+					}
+				}
             }
             simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);
         }
