--- ./original/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2022-12-16 21:31:18.000000000 +0000
+++ ./variant113/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2022-12-16 22:15:41.000000000 +0000
@@ -117,13 +117,16 @@
 
             // 1. check if there's an artificial variable that can be forced out of the basis
                 for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
+                    {
+						for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
+							int column = i + tableau.getArtificialVariableOffset();
+							final double entry = tableau.getEntry(row, column);
+							if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+								return row;
+							}
+						}
+						return row;
+					}
                 }
 
             // 2. apply Bland's rule to prevent cycling:
