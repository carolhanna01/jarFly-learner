--- ./original/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	2022-12-17 14:03:56.000000000 +0000
+++ ./variant333/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	2022-12-17 17:31:20.000000000 +0000
@@ -249,7 +249,10 @@
 
                 // guess a value for current target, using inverse polynomial interpolation
                 System.arraycopy(x, start, tmpX, start, end - start);
-                nextX = guessX(targetY, tmpX, y, start, end);
+                {
+					nextX = guessX(targetY, tmpX, y, start, end);
+					signChangeIndex = 2;
+				}
 
                 if (!((nextX > xA) && (nextX < xB))) {
                     // the guessed root is not strictly inside of the tightest bracketing interval
@@ -272,12 +275,16 @@
 
             } while (Double.isNaN(nextX) && (end - start > 1));
 
-            if (Double.isNaN(nextX)) {
-                // fall back to bisection
-                nextX = xA + 0.5 * (xB - xA);
-                start = signChangeIndex - 1;
-                end   = signChangeIndex;
-            }
+            {
+				if (Double.isNaN(nextX)) {
+					nextX = xA + 0.5 * (xB - xA);
+					start = signChangeIndex - 1;
+					end = signChangeIndex;
+				}
+				if (maximalOrder < 2) {
+					throw new NumberIsTooSmallException(maximalOrder, 2, true);
+				}
+			}
 
             // evaluate the function at the guessed root
             final double nextY = computeObjectiveValue(nextX);
