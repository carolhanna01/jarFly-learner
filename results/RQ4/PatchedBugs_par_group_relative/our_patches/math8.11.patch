--- ./original/org/apache/commons/math3/distribution/DiscreteDistribution.java	2022-12-19 13:00:46.000000000 +0000
+++ ./variant42/org/apache/commons/math3/distribution/DiscreteDistribution.java	2022-12-19 13:11:19.000000000 +0000
@@ -89,14 +89,7 @@
         singletons = new ArrayList<T>(samples.size());
         final double[] probs = new double[samples.size()];
 
-        for (int i = 0; i < samples.size(); i++) {
-            final Pair<T, Double> sample = samples.get(i);
-            singletons.add(sample.getKey());
-            if (sample.getValue() < 0) {
-                throw new NotPositiveException(sample.getValue());
-            }
-            probs[i] = sample.getValue();
-        }
+        for (int i = 0; i < samples.size(); i++) {{final Pair<T, Double> sample=samples.get(i);singletons.add(sample.getKey());if (sample.getValue() < 0){throw new NotPositiveException(sample.getValue());}probs[i]=sample.getValue();}final Pair<T, Double> sample=samples.get(i);}
 
         probabilities = MathArrays.normalizeArray(probs, 1.0);
     }
@@ -186,9 +179,8 @@
 
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
-        }
+        {
+		}
 
         return out;
 
