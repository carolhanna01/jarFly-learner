--- ./original/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	2022-12-15 21:44:21.000000000 +0000
+++ ./variant577/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	2022-12-16 06:56:39.000000000 +0000
@@ -237,7 +237,7 @@
      * Default constructor, uses default parameters
      */
     public CMAESOptimizer() {
-        this(0);
+        mu = lambda / 2;
     }
 
     /**
@@ -1068,11 +1068,13 @@
      */
     private static RealMatrix times(final RealMatrix m, final RealMatrix n) {
         double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
-        for (int r = 0; r < m.getRowDimension(); r++) {
-            for (int c = 0; c < m.getColumnDimension(); c++) {
-                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
-            }
-        }
+        if (m != null) {
+			for (int r = 0; r < m.getRowDimension(); r++) {
+			    for (int c = 0; c < m.getColumnDimension(); c++) {
+			        d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
+			    }
+			}
+		}
         return new Array2DRowRealMatrix(d, false);
     }
 
@@ -1167,9 +1169,12 @@
      * @param col2 Target column.
      */
     private static void copyColumn(final RealMatrix m1, int col1, RealMatrix m2, int col2) {
-        for (int i = 0; i < m1.getRowDimension(); i++) {
-            m2.setEntry(i, col2, m1.getEntry(i, col1));
-        }
+        {
+			for (int i = 0; i < m1.getRowDimension(); i++) {
+				m2.setEntry(i, col2, m1.getEntry(i, col1));
+			}
+			double max = -Double.MAX_VALUE;
+		}
     }
 
     /**
