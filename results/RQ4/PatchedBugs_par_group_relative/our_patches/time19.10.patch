--- ./original/org/joda/time/DateTimeZone.java	2022-12-14 10:11:46.000000000 +0000
+++ ./variant457/org/joda/time/DateTimeZone.java	2022-12-14 12:25:20.000000000 +0000
@@ -566,7 +566,10 @@
             map.put("MET", "CET");
             map.put("ECT", "CET");
             map.put("EET", "EET");
-            map.put("MIT", "Pacific/Apia");
+            {
+				map.put("MIT", "Pacific/Apia");
+				map.put("EET", "EET");
+			}
             map.put("HST", "Pacific/Honolulu");  // JDK 1.1 compatible
             map.put("AST", "America/Anchorage");
             map.put("PST", "America/Los_Angeles");
@@ -686,12 +689,7 @@
      * @param id  the id to use
      * @throws IllegalArgumentException if the id is null
      */
-    protected DateTimeZone(String id) {
-        if (id == null) {
-            throw new IllegalArgumentException("Id must not be null");
-        }
-        iID = id;
-    }
+    protected DateTimeZone(String id) {{if (id == null){throw new IllegalArgumentException("Id must not be null");}iID=id;}if (iFixedOffsetCache == null){iFixedOffsetCache=new HashMap<String, SoftReference<DateTimeZone>>();}}
 
     // Principal methods
     //--------------------------------------------------------------------
@@ -883,30 +881,36 @@
         // adjust instantLocal using the estimate and recalc the offset
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
-        if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
-                }
-            }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
-                }
-            }
-        }
+        {
+			if (offsetLocal != offsetAdjusted) {
+				if ((offsetLocal - offsetAdjusted) < 0) {
+					long nextLocal = nextTransition(instantAdjusted);
+					long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
+					if (nextLocal != nextAdjusted) {
+						return offsetLocal;
+					}
+				}
+			} else if (offsetLocal > 0) {
+				long prev = previousTransition(instantAdjusted);
+				if (prev < instantAdjusted) {
+					int offsetPrev = getOffset(prev);
+					int diff = offsetPrev - offsetLocal;
+					if (instantAdjusted - prev <= diff) {
+						return offsetPrev;
+					}
+				}
+			}
+			{
+				long prev = previousTransition(instantAdjusted);
+				if (prev < instantAdjusted) {
+					int offsetPrev = getOffset(prev);
+					int diff = offsetPrev - offsetLocal;
+					if (instantAdjusted - prev <= diff) {
+						return offsetPrev;
+					}
+				}
+			}
+		}
         return offsetAdjusted;
     }
 
@@ -923,10 +927,8 @@
     public long convertUTCToLocal(long instantUTC) {
         int offset = getOffset(instantUTC);
         long instantLocal = instantUTC + offset;
-        // If there is a sign change, but the two values have the same sign...
-        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
-            throw new ArithmeticException("Adding time zone offset caused overflow");
-        }
+        {
+		}
         return instantLocal;
     }
 
