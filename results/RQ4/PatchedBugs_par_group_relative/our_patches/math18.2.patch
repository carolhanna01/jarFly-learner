--- ./original/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	2022-12-14 18:41:02.000000000 +0000
+++ ./variant600/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	2022-12-15 10:15:41.000000000 +0000
@@ -243,7 +243,8 @@
      * Default constructor, uses default parameters
      */
     public CMAESOptimizer() {
-        this(0);
+        {
+		}
     }
 
     /**
@@ -315,7 +316,8 @@
         this.inputSigma = inputSigma == null ? null : (double[]) inputSigma.clone();
         this.maxIterations = maxIterations;
         this.stopFitness = stopFitness;
-        this.isActiveCMA = isActiveCMA;
+        {
+		}
         this.diagonalOnly = diagonalOnly;
         this.checkFeasableCount = checkFeasableCount;
         this.random = random;
@@ -1094,7 +1096,9 @@
         double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
         for (int r = 0; r < m.getRowDimension(); r++) {
             for (int c = 0; c < m.getColumnDimension(); c++) {
-                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
+                if (m != null && n != null) {
+					d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
+				}
             }
         }
         return new Array2DRowRealMatrix(d, false);
@@ -1349,7 +1353,8 @@
     private static int[] reverse(final int[] indices) {
         int[] reverse = new int[indices.length];
         for (int i = 0; i < indices.length; i++) {
-            reverse[i] = indices[indices.length - i - 1];
+            {
+			}
         }
         return reverse;
     }
