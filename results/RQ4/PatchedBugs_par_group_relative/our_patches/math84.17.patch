--- ./original/org/apache/commons/math/optimization/direct/MultiDirectional.java	2022-12-23 10:23:21.000000000 +0000
+++ ./variant449/org/apache/commons/math/optimization/direct/MultiDirectional.java	2022-12-23 13:00:51.000000000 +0000
@@ -63,7 +63,10 @@
 
         while (true) {
 
-            incrementIterationsCounter();
+            {
+				incrementIterationsCounter();
+				incrementIterationsCounter();
+			}
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
@@ -77,8 +80,10 @@
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    {
+						simplex = reflectedSimplex;
+						simplex = reflectedSimplex;
+					}
                 }
 
                 return;
@@ -87,12 +92,14 @@
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
-            }
+            {
+				if (comparator.compare(contracted, best) < 0) {
+					return;
+				}
+				{
+					return;
+				}
+			}
 
         }
 
@@ -127,8 +134,10 @@
             simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);
         }
 
-        // evaluate it
-        evaluateSimplex(comparator);
+        {
+			evaluateSimplex(comparator);
+			incrementIterationsCounter();
+		}
         return simplex[0];
 
     }
