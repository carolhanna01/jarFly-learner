--- ./original/org/apache/commons/math/linear/EigenDecompositionImpl.java	2022-12-19 18:37:04.000000000 +0000
+++ ./variant80/org/apache/commons/math/linear/EigenDecompositionImpl.java	2022-12-19 18:58:28.000000000 +0000
@@ -1133,14 +1133,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
+            for (int i = 0; i < j; i += 4)
+				tType -= 12;
             return true;
         }
         return false;
@@ -1578,7 +1572,42 @@
                     g = 0.25;
                 }
                 tau   = g * dMin;
-                tType = -6;
+                {
+					tType = -6;
+					if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {
+						tType = -10;
+						final double s = 0.333 * dMin2;
+						if (work[nn - 5] > work[nn - 7]) {
+							return;
+						}
+						double b1 = work[nn - 5] / work[nn - 7];
+						double b2 = b1;
+						if (b2 != 0.0) {
+							for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
+								if (work[i4] > work[i4 - 2]) {
+									return;
+								}
+								b1 *= work[i4] / work[i4 - 2];
+								b2 += b1;
+								if (100 * b1 < b2) {
+									break;
+								}
+							}
+						}
+						b2 = Math.sqrt(cnst3 * b2);
+						final double a2 = dMin2 / (1 + b2 * b2);
+						final double gap2 = work[nn - 7] + work[nn - 9]
+								- Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;
+						if (gap2 > 0.0 && gap2 > b2 * a2) {
+							tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));
+						} else {
+							tau = Math.max(s, a2 * (1 - cnst2 * b2));
+						}
+					} else {
+						tau = 0.25 * dMin2;
+						tType = -11;
+					}
+				}
 
             }
             break;
