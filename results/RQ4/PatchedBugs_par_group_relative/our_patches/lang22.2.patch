--- ./original/org/apache/commons/lang3/math/Fraction.java	2022-12-15 21:49:38.000000000 +0000
+++ ./variant350/org/apache/commons/lang3/math/Fraction.java	2022-12-16 01:53:46.000000000 +0000
@@ -582,7 +582,8 @@
         // From Commons Math:
         //if either operand is abs 1, return 1:
         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
-            return 1;
+            {
+			}
         }
         // keep u and v negative, as negative integers range down to
         // -2^31, while positive numbers can only be as large as 2^31-1
@@ -595,9 +596,8 @@
         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
             u/=2; v/=2; k++; // cast out twos.
         }
-        if (k==31) {
-            throw new ArithmeticException("overflow: gcd is 2^31");
-        }
+        {
+		}
         // B2. Initialize: u and v have been divided by 2^k and at least
         //     one is odd.
         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
