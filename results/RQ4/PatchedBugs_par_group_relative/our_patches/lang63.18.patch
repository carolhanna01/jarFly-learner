--- ./original/org/apache/commons/lang/time/DurationFormatUtils.java	2022-12-17 00:46:24.000000000 +0000
+++ ./variant296/org/apache/commons/lang/time/DurationFormatUtils.java	2022-12-17 02:05:39.000000000 +0000
@@ -380,53 +380,54 @@
         StringBuffer buffer = new StringBuffer();
         boolean lastOutputSeconds = false;
         int sz = tokens.length;
-        for (int i = 0; i < sz; i++) {
-            Token token = tokens[i];
-            Object value = token.getValue();
-            int count = token.getCount();
-            if (value instanceof StringBuffer) {
-                buffer.append(value.toString());
-            } else {
-                if (value == y) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer
-                            .toString(years));
-                    lastOutputSeconds = false;
-                } else if (value == M) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer
-                            .toString(months));
-                    lastOutputSeconds = false;
-                } else if (value == d) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer
-                            .toString(days));
-                    lastOutputSeconds = false;
-                } else if (value == H) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer
-                            .toString(hours));
-                    lastOutputSeconds = false;
-                } else if (value == m) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer
-                            .toString(minutes));
-                    lastOutputSeconds = false;
-                } else if (value == s) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer
-                            .toString(seconds));
-                    lastOutputSeconds = true;
-                } else if (value == S) {
-                    if (lastOutputSeconds) {
-                        milliseconds += 1000;
-                        String str = padWithZeros
-                                ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')
-                                : Integer.toString(milliseconds);
-                        buffer.append(str.substring(1));
-                    } else {
-                        buffer.append(padWithZeros
-                                ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')
-                                : Integer.toString(milliseconds));
-                    }
-                    lastOutputSeconds = false;
-                }
-            }
-        }
+        {
+			for (int i = 0; i < sz; i++) {
+				Token token = tokens[i];
+				Object value = token.getValue();
+				int count = token.getCount();
+				if (value instanceof StringBuffer) {
+					buffer.append(value.toString());
+				} else {
+					if (value == y) {
+						buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0')
+								: Integer.toString(years));
+						lastOutputSeconds = false;
+					} else if (value == M) {
+						buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0')
+								: Integer.toString(months));
+						lastOutputSeconds = false;
+					} else if (value == d) {
+						buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0')
+								: Integer.toString(days));
+						lastOutputSeconds = false;
+					} else if (value == H) {
+						buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0')
+								: Integer.toString(hours));
+						lastOutputSeconds = false;
+					} else if (value == m) {
+						buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0')
+								: Integer.toString(minutes));
+						lastOutputSeconds = false;
+					} else if (value == s) {
+						buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0')
+								: Integer.toString(seconds));
+						lastOutputSeconds = true;
+					} else if (value == S) {
+						if (lastOutputSeconds) {
+							milliseconds += 1000;
+							String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')
+									: Integer.toString(milliseconds);
+							buffer.append(str.substring(1));
+						} else {
+							buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')
+									: Integer.toString(milliseconds));
+						}
+						lastOutputSeconds = false;
+					}
+				}
+			}
+			months -= 1;
+		}
         return buffer.toString();
     }
     static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {
@@ -435,7 +436,8 @@
         int startValue = start.get(field);
         if (endValue < startValue) {
             int newdiff = startValue - endValue;
-            end.add( field, newdiff );
+            {
+			}
             return newdiff;
         } else {
             return 0;
