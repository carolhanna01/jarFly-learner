--- ./original/org/apache/commons/math/linear/EigenDecompositionImpl.java	2022-12-19 20:24:38.000000000 +0000
+++ ./variant20/org/apache/commons/math/linear/EigenDecompositionImpl.java	2022-12-19 20:27:09.000000000 +0000
@@ -1050,17 +1050,17 @@
 
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
-            if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
-            }
+            {
+				if (flipIfWarranted(deflatedEnd, 1)) {
+					dMin2 = Math.min(dMin2, work[l - 1]);
+					work[l - 1] = Math.min(work[l - 1], Math.min(work[3 + pingPong], work[7 + pingPong]));
+					work[l - 2 * pingPong] = Math.min(work[l - 2 * pingPong],
+							Math.min(work[6 + pingPong], work[6 + pingPong]));
+					qMax = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+					dMin = -0.0;
+				}
+				dMin1 = -work[4 * start + pingPong];
+			}
         }
 
         if ((dMin < 0) ||
