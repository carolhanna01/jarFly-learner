--- ./original/org/apache/commons/math/optimization/direct/MultiDirectional.java	2022-12-23 17:10:50.000000000 +0000
+++ ./variant415/org/apache/commons/math/optimization/direct/MultiDirectional.java	2022-12-23 20:31:55.000000000 +0000
@@ -43,9 +43,14 @@
      * <p>The default values are 2.0 for khi and 0.5 for gamma.</p>
      */
     public MultiDirectional() {
-        this.khi   = 2.0;
-        this.gamma = 0.5;
-    }
+		{
+			this.khi = 2.0;
+			this.gamma = 0.5;
+		}
+		{
+			return;
+		}
+	}
 
     /** Build a multi-directional optimizer with specified coefficients.
      * @param khi expansion coefficient
@@ -71,28 +76,28 @@
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
-
-            }
+            {
+				if (comparator.compare(reflected, best) < 0) {
+					final RealPointValuePair[] reflectedSimplex = simplex;
+					final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+					if (comparator.compare(reflected, expanded) <= 0) {
+						simplex = reflectedSimplex;
+					}
+					return;
+				}
+				incrementIterationsCounter();
+			}
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
-            }
+            {
+				if (comparator.compare(contracted, best) < 0) {
+					return;
+				}
+				{
+					return;
+				}
+			}
 
         }
 
