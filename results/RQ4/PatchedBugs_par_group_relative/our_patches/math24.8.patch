--- ./original/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	2022-12-16 08:58:11.000000000 +0000
+++ ./variant560/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	2022-12-16 23:25:54.000000000 +0000
@@ -133,8 +133,11 @@
         double e = 0;
         double fx = computeObjectiveValue(x);
         if (!isMinim) {
-            fx = -fx;
-        }
+			{
+				fx = -fx;
+			}
+			v = w;
+		}
         double fv = fx;
         double fw = fx;
 
@@ -156,62 +159,60 @@
                 double r = 0;
                 double u = 0;
 
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
-                    r = (x - w) * (fx - fv);
-                    q = (x - v) * (fx - fw);
-                    p = (x - v) * q - (x - w) * r;
-                    q = 2 * (q - r);
-
-                    if (q > 0) {
-                        p = -p;
-                    } else {
-                        q = -q;
-                    }
-
-                    r = e;
-                    e = d;
-
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
-
-                        // f must not be evaluated too close to a or b.
-                        if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
-                            }
-                        }
-                    } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
-                        }
-                        d = GOLDEN_SECTION * e;
-                    }
-                } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
-                    d = GOLDEN_SECTION * e;
-                }
+                {
+					if (FastMath.abs(e) > tol1) {
+						r = (x - w) * (fx - fv);
+						q = (x - v) * (fx - fw);
+						p = (x - v) * q - (x - w) * r;
+						q = 2 * (q - r);
+						if (q > 0) {
+							p = -p;
+						} else {
+							q = -q;
+						}
+						r = e;
+						e = d;
+						if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
+							d = p / q;
+							u = x + d;
+							if (u - a < tol2 || b - u < tol2) {
+								if (x <= m) {
+									d = tol1;
+								} else {
+									d = -tol1;
+								}
+							}
+						} else {
+							if (x < m) {
+								e = b - x;
+							} else {
+								e = a - x;
+							}
+							d = GOLDEN_SECTION * e;
+						}
+					} else {
+						if (x < m) {
+							e = b - x;
+						} else {
+							e = a - x;
+						}
+						d = GOLDEN_SECTION * e;
+					}
+					u = x - tol1;
+				}
 
                 // Update by at least "tol1".
                 if (FastMath.abs(d) < tol1) {
-                    if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
+                    {
+						if (d >= 0) {
+							u = x + tol1;
+						} else {
+							u = x - tol1;
+						}
+						{
+							b = x;
+						}
+					}
                 } else {
                     u = x + d;
                 }
@@ -223,7 +224,10 @@
 
                 // User-defined convergence checker.
                 previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+                {
+					current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
+					u = x + d;
+				}
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
