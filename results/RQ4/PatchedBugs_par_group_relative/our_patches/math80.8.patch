--- ./original/org/apache/commons/math/linear/EigenDecompositionImpl.java	2022-12-23 07:52:15.000000000 +0000
+++ ./variant312/org/apache/commons/math/linear/EigenDecompositionImpl.java	2022-12-23 10:14:58.000000000 +0000
@@ -904,20 +904,21 @@
                     offDiagMin = work[4 * i0 + 2];
                     double previousEMin = work[4 * i0 + 3];
                     for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {
-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||
-                            (work[i + 2] <= TOLERANCE_2 * sigma)) {
-                            // insert a split
-                            work[i + 2]  = -sigma;
-                            split        = i / 4;
-                            diagMax      = 0;
-                            offDiagMin   = work[i + 6];
-                            previousEMin = work[i + 7];
-                        } else {
-                            diagMax      = Math.max(diagMax, work[i + 4]);
-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);
-                            previousEMin = Math.min(previousEMin, work[i + 3]);
-                        }
-                    }
+						{
+							if ((work[i + 3] <= TOLERANCE_2 * work[i]) || (work[i + 2] <= TOLERANCE_2 * sigma)) {
+								work[i + 2] = -sigma;
+								split = i / 4;
+								diagMax = 0;
+								offDiagMin = work[i + 6];
+								previousEMin = work[i + 7];
+							} else {
+								diagMax = Math.max(diagMax, work[i + 4]);
+								offDiagMin = Math.min(offDiagMin, work[i + 2]);
+								previousEMin = Math.min(previousEMin, work[i + 3]);
+							}
+						}
+						break;
+					}
                     work[4 * n0 - 2] = offDiagMin;
                     work[4 * n0 - 1] = previousEMin;
                     i0 = split + 1;
@@ -1133,14 +1134,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
+            {
+			}
             return true;
         }
         return false;
@@ -1524,63 +1519,55 @@
                     tau = s;
 
                 }
-            } else if (dMin == dN2) {
-
-                // case 5.
-                tType = -5;
-                double s = 0.25 * dMin;
-
-                // compute contribution to norm squared from i > nn-2.
-                final int np = nn - 2 * pingPong;
-                double b1 = work[np - 2];
-                double b2 = work[np - 6];
-                final double gam = dN2;
-                if (work[np - 8] > b2 || work[np - 4] > b1) {
-                    return;
-                }
-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
-
-                // approximate contribution to norm squared from i < nn-2.
-                if (end - start > 3) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
-
-                if (a2 < cnst1) {
-                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
-                } else {
-                    tau = s;
-                }
-
             } else {
-
-                // case 6, no information to guide us.
-                if (tType == -6) {
-                    g += 0.333 * (1 - g);
-                } else if (tType == -18) {
-                    g = 0.25 * 0.333;
-                } else {
-                    g = 0.25;
-                }
-                tau   = g * dMin;
-                tType = -6;
-
-            }
+				if (dMin == dN2) {
+					tType = -5;
+					double s = 0.25 * dMin;
+					final int np = nn - 2 * pingPong;
+					double b1 = work[np - 2];
+					double b2 = work[np - 6];
+					final double gam = dN2;
+					if (work[np - 8] > b2 || work[np - 4] > b1) {
+						return;
+					}
+					double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
+					if (end - start > 3) {
+						b2 = work[nn - 13] / work[nn - 15];
+						a2 = a2 + b2;
+						for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
+							if (b2 == 0.0) {
+								break;
+							}
+							b1 = b2;
+							if (work[i4] > work[i4 - 2]) {
+								return;
+							}
+							b2 = b2 * (work[i4] / work[i4 - 2]);
+							a2 = a2 + b2;
+							if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
+								break;
+							}
+						}
+						a2 = cnst3 * a2;
+					}
+					if (a2 < cnst1) {
+						tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
+					} else {
+						tau = s;
+					}
+				} else {
+					if (tType == -6) {
+						g += 0.333 * (1 - g);
+					} else if (tType == -18) {
+						g = 0.25 * 0.333;
+					} else {
+						g = 0.25;
+					}
+					tau = g * dMin;
+					tType = -6;
+				}
+				tType = -7;
+			}
             break;
 
         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.
