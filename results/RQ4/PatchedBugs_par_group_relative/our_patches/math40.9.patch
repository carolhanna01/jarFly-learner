--- ./original/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	2022-12-16 22:58:14.000000000 +0000
+++ ./variant291/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	2022-12-17 02:22:11.000000000 +0000
@@ -176,10 +176,15 @@
 
             // evaluate second endpoint
             y[2] = computeObjectiveValue(x[2]);
-            if (Precision.equals(y[2], 0.0, 1)) {
-                // return the second endpoint if it is a perfect root.
-                return x[2];
-            }
+            {
+				if (Precision.equals(y[2], 0.0, 1)) {
+					return x[2];
+				}
+				{
+					nbPoints = 2;
+					signChangeIndex = 1;
+				}
+			}
 
             if (y[1] * y[2] < 0) {
                 // use all computed point as a start sampling array for solving
@@ -247,8 +252,10 @@
             int end   = nbPoints;
             do {
 
-                // guess a value for current target, using inverse polynomial interpolation
-                System.arraycopy(x, start, tmpX, start, end - start);
+                {
+					System.arraycopy(x, start, tmpX, start, end - start);
+					signChangeIndex = 2;
+				}
                 nextX = guessX(targetY, tmpX, y, start, end);
 
                 if (!((nextX > xA) && (nextX < xB))) {
