--- ./original/org/apache/commons/math/linear/EigenDecompositionImpl.java	2022-12-24 13:06:15.000000000 +0000
+++ ./variant352/org/apache/commons/math/linear/EigenDecompositionImpl.java	2022-12-24 16:15:48.000000000 +0000
@@ -551,7 +551,10 @@
 
         // transform the matrix to tridiagonal
         transformer = new TriDiagonalTransformer(matrix);
-        main      = transformer.getMainDiagonalRef();
+        {
+			main = transformer.getMainDiagonalRef();
+			dMin = Math.min(dMin, dN);
+		}
         secondary = transformer.getSecondaryDiagonalRef();
 
         // pre-compute some elements
@@ -884,44 +887,49 @@
 
             pingPong = 0;
             int maxIter = 30 * (n0 - i0);
-            for (int k = 0; i0 < n0; ++k) {
-                if (k >= maxIter) {
-                    throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));
-                }
-
-                // perform one step
-                n0 = goodStep(i0, n0);
-                pingPong = 1 - pingPong;
-
-                // check for new splits after "ping" steps
-                // when the last elements of qd array are very small
-                if ((pingPong == 0) && (n0 - i0 > 3) &&
-                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&
-                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma)) {
-                    int split  = i0 - 1;
-                    diagMax    = work[4 * i0];
-                    offDiagMin = work[4 * i0 + 2];
-                    double previousEMin = work[4 * i0 + 3];
-                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {
-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&
-                            (work[i + 2] <= TOLERANCE_2 * sigma)) {
-                            // insert a split
-                            work[i + 2]  = -sigma;
-                            split        = i / 4;
-                            diagMax      = 0;
-                            offDiagMin   = work[i + 6];
-                            previousEMin = work[i + 7];
-                        } else {
-                            diagMax      = Math.max(diagMax, work[i + 4]);
-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);
-                            previousEMin = Math.min(previousEMin, work[i + 3]);
-                        }
-                    }
-                    work[4 * n0 - 2] = offDiagMin;
-                    work[4 * n0 - 1] = previousEMin;
-                    i0 = split + 1;
-                }
-            }
+            {
+				for (int k = 0; i0 < n0; ++k) {
+					if (k >= maxIter) {
+						throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));
+					}
+					n0 = goodStep(i0, n0);
+					pingPong = 1 - pingPong;
+					if ((pingPong == 0) && (n0 - i0 > 3) && (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax)
+							&& (work[4 * n0 - 2] <= TOLERANCE_2 * sigma)) {
+						int split = i0 - 1;
+						diagMax = work[4 * i0];
+						offDiagMin = work[4 * i0 + 2];
+						double previousEMin = work[4 * i0 + 3];
+						for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {
+							if ((work[i + 3] <= TOLERANCE_2 * work[i]) && (work[i + 2] <= TOLERANCE_2 * sigma)) {
+								work[i + 2] = -sigma;
+								split = i / 4;
+								diagMax = 0;
+								offDiagMin = work[i + 6];
+								previousEMin = work[i + 7];
+							} else {
+								diagMax = Math.max(diagMax, work[i + 4]);
+								offDiagMin = Math.min(offDiagMin, work[i + 2]);
+								previousEMin = Math.min(previousEMin, work[i + 3]);
+							}
+						}
+						work[4 * n0 - 2] = offDiagMin;
+						work[4 * n0 - 1] = previousEMin;
+						i0 = split + 1;
+					}
+				}
+				{
+					if (tType == -6) {
+						g += 0.333 * (1 - g);
+					} else if (tType == -18) {
+						g = 0.25 * 0.333;
+					} else {
+						g = 0.25;
+					}
+					tau = g * dMin;
+					tType = -6;
+				}
+			}
 
         }
 
@@ -1541,24 +1549,8 @@
 
                 // approximate contribution to norm squared from i < nn-2.
                 if (end - start > 2) {
-                    b2 = work[nn - 13] / work[nn - 15];
-                    a2 = a2 + b2;
-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
-                        if (b2 == 0.0) {
-                            break;
-                        }
-                        b1 = b2;
-                        if (work[i4]  >  work[i4 - 2]) {
-                            return;
-                        }
-                        b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {
-                            break;
-                        }
-                    }
-                    a2 = cnst3 * a2;
-                }
+					g = 0.25 * 0.333;
+				}
 
                 if (a2 < cnst1) {
                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
