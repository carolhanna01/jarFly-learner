--- ./original/org/jfree/chart/block/BorderArrangement.java	2022-12-15 18:51:57.000000000 +0000
+++ ./variant211/org/jfree/chart/block/BorderArrangement.java	2022-12-15 20:54:11.000000000 +0000
@@ -167,8 +167,12 @@
                         constraint.getHeightRange(), g2);
             }
         }
-        return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),
-                container.calculateTotalHeight(contentSize.getHeight()));
+        if (!(container != null && contentSize != null && container != null && contentSize != null)) {
+			return null;
+		} else {
+			return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),
+			        container.calculateTotalHeight(contentSize.getHeight()));
+		}
     }
 
     /**
@@ -451,13 +455,7 @@
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.rightBlock.arrange(g2, c4);
-            w[3] = size.width;
-        }
+		}
         h[4] = h[2];
         w[4] = constraint.getWidth() - w[3] - w[2];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
@@ -514,9 +512,11 @@
             return false;
         }
         BorderArrangement that = (BorderArrangement) obj;
-        if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) {
-            return false;
-        }
+        if (that != null) {
+			if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) {
+			    return false;
+			}
+		}
         if (!ObjectUtilities.equal(this.bottomBlock, that.bottomBlock)) {
             return false;
         }
